/* 
==============================================================================
                        CSS FLEXBOX COMPLETE GUIDE
==============================================================================

This file covers everything you need to know about CSS Flexbox (Flexible Box Layout).
Flexbox is a one-dimensional layout method for arranging items in rows or columns.

Author: CSS Learning Guide
Date: July 22, 2025
*/

/* 
==============================================================================
                           TABLE OF CONTENTS
==============================================================================

1. Flexbox Fundamentals
2. Flex Container Properties
3. Flex Item Properties
4. Flex Direction & Wrapping
5. Alignment & Justification
6. Flex Grow, Shrink & Basis
7. Common Flexbox Patterns
8. Real-World Examples
9. Responsive Flexbox Layouts
10. Flexbox vs Grid
11. Browser Support & Fallbacks
12. Best Practices & Tips

*/

/* 
==============================================================================
                         1. FLEXBOX FUNDAMENTALS
==============================================================================

WHAT IS FLEXBOX?
- One-dimensional layout method (either row OR column)
- Distributes space and aligns items in a flex container
- Items can grow, shrink, and move within the container
- Excellent for component-level layouts

KEY CONCEPTS:
- Flex Container (parent): Element with display: flex
- Flex Items (children): Direct children of flex container
- Main Axis: Primary direction of flex layout
- Cross Axis: Perpendicular to main axis
- Main Start/End: Beginning and end of main axis
- Cross Start/End: Beginning and end of cross axis
*/

/* Basic Flexbox Setup */
.flex-container {
  display: flex; /* Creates flex formatting context */
  /* All direct children automatically become flex items */

  /* Visual styling for demonstration */
  background-color: #e3f2fd;
  border: 2px solid #1976d2;
  border-radius: 8px;
  padding: 20px;
  margin: 20px 0;
}

.flex-item {
  /* Flex items have default properties:
       flex-grow: 0;     - Don't grow by default
       flex-shrink: 1;   - Can shrink if needed
       flex-basis: auto; - Size based on content
    */

  /* Visual styling */
  background-color: white;
  border: 1px solid #1976d2;
  border-radius: 4px;
  padding: 15px;
  margin: 5px;
  text-align: center;
  min-width: 80px;
}

/* 
==============================================================================
                      2. FLEX CONTAINER PROPERTIES
==============================================================================

These properties are applied to the flex container (parent element)
and control the overall behavior of the flex layout.
*/

/* 
FLEX-DIRECTION
Controls the main axis direction and order of flex items
Values: row | row-reverse | column | column-reverse
Default: row
*/

.flex-row {
  display: flex;
  flex-direction: row; /* Default: left to right */
  background-color: #e8f5e8;
  padding: 15px;
  margin: 10px 0;
}

.flex-row-reverse {
  display: flex;
  flex-direction: row-reverse; /* Right to left */
  background-color: #fff3e0;
  padding: 15px;
  margin: 10px 0;
}

.flex-column {
  display: flex;
  flex-direction: column; /* Top to bottom */
  background-color: #fce4ec;
  padding: 15px;
  margin: 10px 0;
  height: 200px; /* Height needed for column demo */
}

.flex-column-reverse {
  display: flex;
  flex-direction: column-reverse; /* Bottom to top */
  background-color: #f3e5f5;
  padding: 15px;
  margin: 10px 0;
  height: 200px;
}

/* 
FLEX-WRAP
Controls whether flex items wrap to new lines
Values: nowrap | wrap | wrap-reverse
Default: nowrap
*/

.flex-nowrap {
  display: flex;
  flex-wrap: nowrap; /* Default: items stay on one line */
  background-color: #e0f2f1;
  padding: 15px;
  margin: 10px 0;
}

.flex-wrap {
  display: flex;
  flex-wrap: wrap; /* Items wrap to new lines */
  background-color: #e8eaf6;
  padding: 15px;
  margin: 10px 0;
}

.flex-wrap-reverse {
  display: flex;
  flex-wrap: wrap-reverse; /* Items wrap in reverse order */
  background-color: #fce4ec;
  padding: 15px;
  margin: 10px 0;
}

/* 
FLEX-FLOW (Shorthand)
Combines flex-direction and flex-wrap
Syntax: flex-flow: <direction> <wrap>
*/

.flex-flow-demo {
  display: flex;
  flex-flow: row wrap; /* Same as: flex-direction: row; flex-wrap: wrap; */
  background-color: #f1f8e9;
  padding: 15px;
  margin: 10px 0;
}

/* 
JUSTIFY-CONTENT
Aligns items along the main axis
Values: flex-start | flex-end | center | space-between | space-around | space-evenly
Default: flex-start
*/

.justify-flex-start {
  display: flex;
  justify-content: flex-start; /* Default: items at start of main axis */
  background-color: #e3f2fd;
  padding: 15px;
  margin: 10px 0;
}

.justify-flex-end {
  display: flex;
  justify-content: flex-end; /* Items at end of main axis */
  background-color: #e8f5e8;
  padding: 15px;
  margin: 10px 0;
}

.justify-center {
  display: flex;
  justify-content: center; /* Items centered on main axis */
  background-color: #fff3e0;
  padding: 15px;
  margin: 10px 0;
}

.justify-space-between {
  display: flex;
  justify-content: space-between; /* Equal space between items */
  background-color: #fce4ec;
  padding: 15px;
  margin: 10px 0;
}

.justify-space-around {
  display: flex;
  justify-content: space-around; /* Equal space around items */
  background-color: #f3e5f5;
  padding: 15px;
  margin: 10px 0;
}

.justify-space-evenly {
  display: flex;
  justify-content: space-evenly; /* Equal space between and around items */
  background-color: #e8eaf6;
  padding: 15px;
  margin: 10px 0;
}

/* 
ALIGN-ITEMS
Aligns items along the cross axis
Values: stretch | flex-start | flex-end | center | baseline
Default: stretch
*/

.align-stretch {
  display: flex;
  align-items: stretch; /* Default: items stretch to fill container */
  background-color: #e0f2f1;
  padding: 15px;
  margin: 10px 0;
  height: 120px; /* Height needed to see stretch effect */
}

.align-flex-start {
  display: flex;
  align-items: flex-start; /* Items at start of cross axis */
  background-color: #e3f2fd;
  padding: 15px;
  margin: 10px 0;
  height: 120px;
}

.align-flex-end {
  display: flex;
  align-items: flex-end; /* Items at end of cross axis */
  background-color: #e8f5e8;
  padding: 15px;
  margin: 10px 0;
  height: 120px;
}

.align-center {
  display: flex;
  align-items: center; /* Items centered on cross axis */
  background-color: #fff3e0;
  padding: 15px;
  margin: 10px 0;
  height: 120px;
}

.align-baseline {
  display: flex;
  align-items: baseline; /* Items aligned to text baseline */
  background-color: #fce4ec;
  padding: 15px;
  margin: 10px 0;
  height: 120px;
}

/* Baseline demo with different font sizes */
.baseline-demo .item1 {
  font-size: 12px;
}
.baseline-demo .item2 {
  font-size: 18px;
}
.baseline-demo .item3 {
  font-size: 24px;
}

/* 
ALIGN-CONTENT
Aligns wrapped lines along the cross axis (only works with flex-wrap)
Values: stretch | flex-start | flex-end | center | space-between | space-around | space-evenly
Default: stretch
*/

.align-content-demo {
  display: flex;
  flex-wrap: wrap;
  align-content: space-between; /* Space between wrapped lines */
  background-color: #f3e5f5;
  padding: 15px;
  margin: 10px 0;
  height: 200px; /* Height needed to see effect */
}

.align-content-demo .wide-item {
  width: 45%; /* Force wrapping */
  margin: 2px;
}

/* 
GAP (Modern Property)
Sets space between flex items
Values: <length> | <percentage>
Shorthand: gap: <row-gap> <column-gap>
*/

.flex-gap {
  display: flex;
  gap: 20px; /* 20px gap between all items */
  background-color: #e8eaf6;
  padding: 15px;
  margin: 10px 0;
}

.flex-gap-separate {
  display: flex;
  flex-wrap: wrap;
  gap: 15px 25px; /* 15px row gap, 25px column gap */
  background-color: #f1f8e9;
  padding: 15px;
  margin: 10px 0;
}

/* 
==============================================================================
                        3. FLEX ITEM PROPERTIES
==============================================================================

These properties are applied to flex items (children of flex container)
and control individual item behavior.
*/

/* 
FLEX-GROW
Controls how much a flex item should grow
Values: <number> (default: 0)
Items with higher values grow more
*/

.grow-demo {
  display: flex;
  background-color: #e3f2fd;
  padding: 15px;
  margin: 10px 0;
}

.grow-0 {
  flex-grow: 0;
} /* Don't grow (default) */
.grow-1 {
  flex-grow: 1;
} /* Grow equally */
.grow-2 {
  flex-grow: 2;
} /* Grow twice as much */
.grow-3 {
  flex-grow: 3;
} /* Grow three times as much */

/* 
FLEX-SHRINK
Controls how much a flex item should shrink
Values: <number> (default: 1)
Items with higher values shrink more
*/

.shrink-demo {
  display: flex;
  background-color: #e8f5e8;
  padding: 15px;
  margin: 10px 0;
  width: 300px; /* Constrained width to force shrinking */
}

.shrink-demo .item {
  width: 150px; /* Initial width larger than container */
}

.shrink-0 {
  flex-shrink: 0;
} /* Don't shrink */
.shrink-1 {
  flex-shrink: 1;
} /* Shrink normally (default) */
.shrink-2 {
  flex-shrink: 2;
} /* Shrink twice as much */

/* 
FLEX-BASIS
Sets the initial main size of a flex item before free space is distributed
Values: auto | <width> | <percentage> | content
Default: auto
*/

.basis-demo {
  display: flex;
  background-color: #fff3e0;
  padding: 15px;
  margin: 10px 0;
}

.basis-auto {
  flex-basis: auto;
} /* Based on content (default) */
.basis-0 {
  flex-basis: 0;
} /* No initial size */
.basis-100 {
  flex-basis: 100px;
} /* 100px initial size */
.basis-percent {
  flex-basis: 30%;
} /* 30% of container */
.basis-content {
  flex-basis: content;
} /* Based on content (newer) */

/* 
FLEX (Shorthand)
Combines flex-grow, flex-shrink, and flex-basis
Syntax: flex: <grow> <shrink> <basis>
Common values: none | auto | initial | <number>
*/

.flex-shorthand-demo {
  display: flex;
  background-color: #fce4ec;
  padding: 15px;
  margin: 10px 0;
}

.flex-none {
  flex: none; /* Same as: 0 0 auto (don't grow/shrink) */
}

.flex-auto {
  flex: auto; /* Same as: 1 1 auto (grow/shrink based on content) */
}

.flex-initial {
  flex: initial; /* Same as: 0 1 auto (default behavior) */
}

.flex-1 {
  flex: 1; /* Same as: 1 1 0% (equal sizing) */
}

.flex-2 {
  flex: 2; /* Same as: 2 1 0% (twice the size) */
}

.flex-custom {
  flex: 1 2 100px; /* grow: 1, shrink: 2, basis: 100px */
}

/* 
ALIGN-SELF
Overrides align-items for individual flex items
Values: auto | stretch | flex-start | flex-end | center | baseline
Default: auto (inherits from align-items)
*/

.align-self-demo {
  display: flex;
  align-items: flex-start; /* Container default */
  background-color: #f3e5f5;
  padding: 15px;
  margin: 10px 0;
  height: 150px;
}

.self-auto {
  align-self: auto;
} /* Inherit from container */
.self-stretch {
  align-self: stretch;
} /* Stretch to fill */
.self-start {
  align-self: flex-start;
} /* Start of cross axis */
.self-end {
  align-self: flex-end;
} /* End of cross axis */
.self-center {
  align-self: center;
} /* Center of cross axis */
.self-baseline {
  align-self: baseline;
} /* Text baseline */

/* 
ORDER
Changes the visual order of flex items without affecting HTML order
Values: <integer> (default: 0)
Lower values appear first, higher values appear last
*/

.order-demo {
  display: flex;
  background-color: #e8eaf6;
  padding: 15px;
  margin: 10px 0;
}

.order-1 {
  order: 1;
}
.order-2 {
  order: 2;
}
.order-3 {
  order: 3;
}
.order-negative {
  order: -1;
} /* Appears first */

/* 
==============================================================================
                     4. COMMON FLEXBOX PATTERNS
==============================================================================

Real-world patterns and solutions using flexbox properties.
*/

/* 
PATTERN 1: PERFECT CENTERING
Center content both horizontally and vertically
*/

.perfect-center {
  display: flex;
  justify-content: center; /* Center horizontally */
  align-items: center; /* Center vertically */
  height: 200px;
  background-color: #e3f2fd;
  border: 2px solid #1976d2;
  border-radius: 8px;
  margin: 20px 0;
}

.centered-content {
  background-color: white;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

/* 
PATTERN 2: EQUAL HEIGHT COLUMNS
Create columns with equal height regardless of content
*/

.equal-height-columns {
  display: flex;
  gap: 20px;
  margin: 20px 0;
}

.column {
  flex: 1; /* Equal width and grow to fill */
  padding: 20px;
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 8px;
}

/* 
PATTERN 3: FLEXIBLE SIDEBAR LAYOUT
Main content area with flexible sidebar
*/

.sidebar-layout {
  display: flex;
  gap: 20px;
  margin: 20px 0;
  min-height: 300px;
}

.sidebar {
  flex: 0 0 250px; /* Don't grow/shrink, 250px width */
  background-color: #2c3e50;
  color: white;
  padding: 20px;
  border-radius: 8px;
}

.main-content {
  flex: 1; /* Take remaining space */
  background-color: #ecf0f1;
  padding: 20px;
  border-radius: 8px;
}

/* 
PATTERN 4: STICKY FOOTER
Footer sticks to bottom when content is short
*/

.page-layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Full viewport height */
}

.page-header {
  flex: 0 0 auto; /* Don't grow/shrink */
  background-color: #34495e;
  color: white;
  padding: 20px;
  text-align: center;
}

.page-main {
  flex: 1; /* Grow to fill available space */
  padding: 20px;
  background-color: #ecf0f1;
}

.page-footer {
  flex: 0 0 auto; /* Don't grow/shrink */
  background-color: #2c3e50;
  color: white;
  padding: 15px;
  text-align: center;
}

/* 
PATTERN 5: NAVIGATION BAR
Flexible navigation with logo and menu items
*/

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 30px;
  background-color: #1976d2;
  color: white;
}

.navbar-brand {
  flex: 0 0 auto; /* Don't grow */
  font-size: 1.5rem;
  font-weight: bold;
}

.navbar-nav {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  gap: 30px;
}

.navbar-nav a {
  color: white;
  text-decoration: none;
  padding: 8px 16px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.navbar-nav a:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.navbar-toggle {
  display: none; /* Hidden by default */
  flex-direction: column;
  cursor: pointer;
  gap: 4px;
}

.navbar-toggle span {
  width: 25px;
  height: 3px;
  background-color: white;
  border-radius: 2px;
}

/* 
PATTERN 6: CARD LAYOUT
Flexible card grid with consistent spacing
*/

.card-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin: 20px 0;
}

.card {
  flex: 1 1 300px; /* Grow, shrink, min 300px width */
  max-width: 400px; /* Prevent cards from getting too wide */
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card-image {
  width: 100%;
  height: 200px;
  background-color: #ddd;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
}

.card-content {
  padding: 20px;
}

.card-title {
  margin: 0 0 10px 0;
  color: #333;
}

.card-text {
  color: #666;
  line-height: 1.5;
}

/* 
PATTERN 7: FORM LAYOUT
Flexible form with aligned labels and inputs
*/

.flex-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
  max-width: 500px;
  margin: 20px 0;
  padding: 30px;
  background-color: #f8f9fa;
  border-radius: 10px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-group label {
  font-weight: bold;
  color: #333;
}

.form-group input,
.form-group textarea,
.form-group select {
  padding: 12px;
  border: 2px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
  outline: none;
  border-color: #1976d2;
}

.form-row {
  display: flex;
  gap: 15px;
}

.form-row .form-group {
  flex: 1;
}

.form-actions {
  display: flex;
  gap: 15px;
  justify-content: flex-end;
}

.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 5px;
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-primary {
  background-color: #1976d2;
  color: white;
}

.btn-primary:hover {
  background-color: #1565c0;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background-color: #5a6268;
}

/* 
==============================================================================
                     5. RESPONSIVE FLEXBOX LAYOUTS
==============================================================================

Using flexbox with media queries for responsive design.
*/

/* 
RESPONSIVE NAVIGATION
Mobile-first approach with collapsible menu
*/

.responsive-nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 20px;
  background-color: #2c3e50;
  color: white;
  position: relative;
}

.nav-brand {
  font-size: 1.5rem;
  font-weight: bold;
}

.nav-menu {
  display: none; /* Hidden on mobile */
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: #2c3e50;
  flex-direction: column;
  padding: 20px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.nav-menu.active {
  display: flex; /* Show when active */
}

.nav-menu a {
  color: white;
  text-decoration: none;
  padding: 10px 0;
  border-bottom: 1px solid #34495e;
}

.nav-toggle {
  display: flex; /* Show hamburger on mobile */
  flex-direction: column;
  cursor: pointer;
  gap: 4px;
}

.nav-toggle span {
  width: 25px;
  height: 3px;
  background-color: white;
  border-radius: 2px;
  transition: all 0.3s ease;
}

/* Tablet and up */
@media (min-width: 768px) {
  .nav-menu {
    display: flex !important; /* Always show */
    position: static;
    width: auto;
    flex-direction: row;
    background: none;
    box-shadow: none;
    padding: 0;
    gap: 30px;
  }

  .nav-menu a {
    border-bottom: none;
    padding: 8px 16px;
    border-radius: 4px;
  }

  .nav-menu a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .nav-toggle {
    display: none; /* Hide hamburger */
  }
}

/* 
RESPONSIVE CARD GRID
Cards adapt to screen size
*/

.responsive-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  margin: 20px 0;
}

.responsive-card {
  flex: 1 1 100%; /* Full width on mobile */
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

/* Tablet */
@media (min-width: 768px) {
  .responsive-cards {
    gap: 20px;
  }

  .responsive-card {
    flex: 1 1 calc(50% - 10px); /* 2 columns */
  }
}

/* Desktop */
@media (min-width: 1024px) {
  .responsive-cards {
    gap: 25px;
  }

  .responsive-card {
    flex: 1 1 calc(33.333% - 17px); /* 3 columns */
  }
}

/* Large screens */
@media (min-width: 1200px) {
  .responsive-card {
    flex: 1 1 calc(25% - 19px); /* 4 columns */
  }
}

/* 
RESPONSIVE SIDEBAR
Sidebar collapses on mobile
*/

.responsive-layout {
  display: flex;
  flex-direction: column; /* Stack on mobile */
  gap: 20px;
  margin: 20px 0;
}

.responsive-sidebar {
  background-color: #34495e;
  color: white;
  padding: 20px;
  border-radius: 8px;
}

.responsive-main {
  flex: 1;
  background-color: #ecf0f1;
  padding: 20px;
  border-radius: 8px;
}

/* Desktop sidebar layout */
@media (min-width: 768px) {
  .responsive-layout {
    flex-direction: row; /* Side by side */
  }

  .responsive-sidebar {
    flex: 0 0 250px; /* Fixed width sidebar */
  }
}

/* 
==============================================================================
                        6. FLEXBOX VS GRID
==============================================================================

When to use Flexbox vs CSS Grid
*/

/* 
FLEXBOX IS BETTER FOR:
✓ One-dimensional layouts (row OR column)
✓ Component-level layouts
✓ Navigation bars
✓ Centering content
✓ Distributing space between items
✓ Flexible item sizing
✓ When you don't know the number of items

GRID IS BETTER FOR:
✓ Two-dimensional layouts (rows AND columns)
✓ Page-level layouts
✓ Complex arrangements
✓ Overlapping content
✓ Precise positioning
✓ When you know the layout structure
*/

/* Flexbox for navigation */
.flex-nav-example {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  background-color: #1976d2;
  color: white;
}

/* Grid for page layout */
.grid-layout-example {
  display: grid;
  grid-template-areas:
    "header header"
    "sidebar main"
    "footer footer";
  grid-template-columns: 250px 1fr;
  grid-template-rows: auto 1fr auto;
  min-height: 100vh;
  gap: 20px;
}

/* Combining both: Grid for layout, Flexbox for components */
.hybrid-header {
  grid-area: header;
  display: flex; /* Flexbox inside grid */
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  background-color: #2c3e50;
  color: white;
}

.hybrid-sidebar {
  grid-area: sidebar;
  display: flex; /* Flexbox inside grid */
  flex-direction: column;
  gap: 15px;
  padding: 20px;
  background-color: #34495e;
  color: white;
}

.hybrid-main {
  grid-area: main;
  display: flex; /* Flexbox inside grid */
  flex-wrap: wrap;
  gap: 20px;
  padding: 20px;
  background-color: #ecf0f1;
}

.hybrid-footer {
  grid-area: footer;
  display: flex; /* Flexbox inside grid */
  justify-content: center;
  align-items: center;
  padding: 15px;
  background-color: #2c3e50;
  color: white;
}

/* 
==============================================================================
                     7. BROWSER SUPPORT & FALLBACKS
==============================================================================

Flexbox browser support and fallback strategies
*/

/* 
BROWSER SUPPORT:
✓ Modern browsers: Full support
✓ IE 11: Good support (with prefixes)
✓ IE 10: Partial support (old syntax)
✓ IE 9 and below: No support

FALLBACK STRATEGIES:
*/

/* Method 1: Feature detection with @supports */
.fallback-layout {
  /* Fallback for older browsers */
  display: table;
  width: 100%;
  table-layout: fixed;
}

.fallback-item {
  display: table-cell;
  vertical-align: top;
  padding: 15px;
}

/* Modern flexbox for supporting browsers */
@supports (display: flex) {
  .fallback-layout {
    display: flex;
    gap: 20px;
  }

  .fallback-item {
    display: block;
    flex: 1;
  }
}

/* Method 2: Progressive enhancement */
.progressive-layout {
  /* Base styles for all browsers */
  overflow: hidden; /* Clearfix */
}

.progressive-item {
  /* Float fallback */
  float: left;
  width: 33.333%;
  padding: 15px;
  box-sizing: border-box;
}

/* Flexbox enhancement */
.flexbox .progressive-layout {
  display: flex;
  gap: 20px;
}

.flexbox .progressive-item {
  float: none;
  width: auto;
  flex: 1;
}

/* Vendor prefixes for older browsers (usually handled by autoprefixer) */
.prefixed-flex {
  display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box; /* OLD - Firefox 19- */
  display: -ms-flexbox; /* TWEENER - IE 10 */
  display: -webkit-flex; /* NEW - Chrome */
  display: flex; /* NEW, Spec - Opera 12.1, Firefox 20+ */

  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;

  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

/* 
==============================================================================
                      8. BEST PRACTICES & TIPS
==============================================================================

Professional tips for using flexbox effectively
*/

/* 
BEST PRACTICES:

1. USE FLEXBOX FOR COMPONENT LAYOUTS
✓ Navigation bars
✓ Card layouts  
✓ Button groups
✓ Form elements
✓ Content alignment

2. AVOID FLEXBOX FOR:
❌ Page-level layouts (use Grid instead)
❌ Complex two-dimensional layouts
❌ When you need precise positioning

3. PERFORMANCE TIPS:
✓ Avoid nested flex containers when possible
✓ Use will-change for animated flex items
✓ Consider contain property for isolated layouts

4. ACCESSIBILITY:
✓ Be careful with order property (affects tab order)
✓ Test with screen readers
✓ Ensure logical heading hierarchy

5. DEBUGGING:
✓ Use browser dev tools flex debugging
✓ Add temporary borders to visualize layout
✓ Check for min-width/max-width constraints
*/

/* Performance optimization */
.optimized-flex {
  display: flex;
  contain: layout style; /* Isolate layout calculations */
}

.animated-flex-item {
  will-change: transform; /* Optimize for animations */
  transition: transform 0.3s ease;
}

.animated-flex-item:hover {
  transform: scale(1.05);
}

/* Debugging utilities */
.debug-flex {
  outline: 2px solid red; /* Visualize container */
}

.debug-flex > * {
  outline: 1px solid blue; /* Visualize items */
}

/* 
COMMON GOTCHAS:

1. FLEX ITEMS WITH TEXT OVERFLOW
*/
.text-overflow-fix {
  display: flex;
}

.text-item {
  flex: 1;
  min-width: 0; /* Allow shrinking below content size */
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* 
2. FLEX ITEMS WITH IMAGES
*/
.image-flex-fix {
  display: flex;
  align-items: flex-start; /* Prevent image stretching */
}

.image-item img {
  max-width: 100%;
  height: auto;
  display: block; /* Remove inline spacing */
}

/* 
3. EQUAL HEIGHT CARDS WITH FOOTER ALIGNMENT
*/
.equal-height-cards {
  display: flex;
  gap: 20px;
}

.card-with-footer {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.card-body {
  flex: 1; /* Grow to push footer down */
  padding: 20px;
}

.card-footer {
  padding: 15px 20px;
  background-color: #f8f9fa;
  border-top: 1px solid #dee2e6;
  margin-top: auto; /* Stick to bottom */
}

/* 
==============================================================================
                               SUMMARY
==============================================================================

FLEXBOX KEY CONCEPTS:

1. CONTAINER PROPERTIES:
   - display: flex
   - flex-direction: row | column | row-reverse | column-reverse
   - flex-wrap: nowrap | wrap | wrap-reverse
   - justify-content: flex-start | center | space-between | etc.
   - align-items: stretch | center | flex-start | etc.
   - align-content: (for wrapped items)
   - gap: space between items

2. ITEM PROPERTIES:
   - flex-grow: how much to grow
   - flex-shrink: how much to shrink
   - flex-basis: initial size
   - flex: shorthand for above three
   - align-self: individual alignment
   - order: visual order

3. COMMON PATTERNS:
   - Perfect centering: justify-content + align-items: center
   - Equal columns: flex: 1 on all items
   - Sidebar layout: flex: 0 0 width on sidebar, flex: 1 on main
   - Sticky footer: flex-direction: column + flex: 1 on main

4. RESPONSIVE APPROACH:
   - Mobile-first design
   - Use media queries to change flex properties
   - Consider flex-wrap for responsive cards
   - Hide/show items with display: none

Remember: Flexbox is perfect for one-dimensional layouts and component-level 
design. Combine with CSS Grid for complete layout solutions.
*/
