/* 
==============================================================================
                        CSS DISPLAY PROPERTIES GUIDE
==============================================================================

This file covers all CSS display types with their rules, behaviors, and use cases.
Understanding display properties is fundamental to CSS layout and positioning.

Author: CSS Learning Guide
Date: July 22, 2025
*/

/* 
==============================================================================
                           TABLE OF CONTENTS
==============================================================================

1. Display: Block
2. Display: Inline
3. Display: Inline-Block
4. Display: None vs Visibility: Hidden
5. Display: Flex (Flexbox)
6. Display: Grid
7. Display: Table Family
8. Display: List-Item
9. Display: Run-In (Legacy)
10. Display: Contents
11. Display: Flow-Root
12. Multi-Value Display Syntax
13. Practical Examples & Use Cases
14. Best Practices & Common Patterns

*/

/* 
==============================================================================
                            1. DISPLAY: BLOCK
==============================================================================

DEFINITION: Block-level elements take up the full width available and 
start on a new line, stacking vertically.

CHARACTERISTICS:
- Takes full width of container (100% by default)
- Always starts on a new line
- Can have width, height, padding, margin on all sides
- Can contain other block and inline elements
- Respects vertical margins (margin collapsing applies)
*/

.display-block-demo {
  display: block;

  /* Block elements can have dimensions */
  /* Dimensions means width and height can be set */
  width: 300px;
  height: 100px;

  /* Full control over spacing */
  padding: 20px;
  margin: 15px 0;

  /* Visual styling for demonstration */
  background-color: #e3f2fd;
  border: 2px solid #1976d2;
  border-radius: 8px;
}

/* 
COMMON BLOCK ELEMENTS BY DEFAULT:
- <div>, <p>, <h1>-<h6>
- <header>, <footer>, <main>, <section>, <article>
- <ul>, <ol>, <li>
- <blockquote>, <pre>
- <form>, <fieldset>

USE CASES:
✓ Layout containers and sections
✓ Content blocks (paragraphs, headings)
✓ Navigation areas
✓ Forms and form sections
✓ Any element that needs full width control
*/

/* Example: Converting inline element to block */
.inline-to-block {
  display: block;
  width: 200px;
  text-align: center;
  padding: 10px;
  margin: 10px 0;
  background-color: #f3e5f5;
  border: 1px solid #9c27b0;
}

/* 
==============================================================================
                            2. DISPLAY: INLINE
==============================================================================

DEFINITION: Inline elements flow within text content, taking only 
the width they need and don't break to new lines.

CHARACTERISTICS:
- Only takes width needed for content
- Flows horizontally with text
- Cannot have width or height set
- Vertical padding/margin may overlap other elements
- Horizontal padding/margin works normally
- Cannot contain block-level elements
*/

.display-inline-demo {
  display: inline;

  /* These properties have NO EFFECT on inline elements */
  /* width: 200px;     ❌ Ignored */
  /* height: 100px;    ❌ Ignored */

  /* These work normally */
  padding: 5px 10px; /* ✓ Horizontal works, vertical may overlap */
  margin: 0 15px; /* ✓ Horizontal works, vertical ignored */

  /* Visual styling */
  background-color: #fff3e0;
  border: 1px solid #f57c00;
  border-radius: 4px;
}

/* 
COMMON INLINE ELEMENTS BY DEFAULT:
- <span>, <a>, <strong>, <em>
- <img>, <input>, <button>
- <code>, <kbd>, <var>
- <small>, <sub>, <sup>

USE CASES:
✓ Text formatting and emphasis
✓ Links within paragraphs
✓ Small UI elements (badges, tags)
✓ Inline icons and images
✓ Form controls within text
*/

/* Example: Inline navigation links */
.inline-nav a {
  display: inline;
  padding: 5px 15px;
  margin: 0 5px;
  text-decoration: none;
  color: #1976d2;
  border-radius: 15px;
  background-color: #e3f2fd;
  transition: all 0.3s ease;
}

.inline-nav a:hover {
  background-color: #bbdefb;
  color: #0d47a1;
}

/* 
==============================================================================
                         3. DISPLAY: INLINE-BLOCK
==============================================================================

DEFINITION: Combines characteristics of both inline and block elements.
Flows inline but accepts block-level properties.

CHARACTERISTICS:
- Flows horizontally like inline elements
- Can have width, height, and full margin/padding control
- Respects vertical alignment properties
- Creates inline formatting context
- Small gap appears between elements (whitespace)
*/

.display-inline-block-demo {
  display: inline-block;

  /* Block-like properties work */
  width: 150px;
  height: 80px;

  /* Full spacing control */
  padding: 15px;
  margin: 10px;

  /* Alignment control */
  vertical-align: top;
  text-align: center;

  /* Visual styling */
  background-color: #e8f5e8;
  border: 2px solid #4caf50;
  border-radius: 8px;
}

/* 
SOLVING THE WHITESPACE GAP ISSUE:
Method 1: Remove whitespace in HTML
Method 2: Set font-size: 0 on parent, reset on children
Method 3: Use float or flexbox instead
*/

.inline-block-container {
  font-size: 0; /* Removes whitespace gaps */
}

.inline-block-container .item {
  display: inline-block;
  font-size: 16px; /* Restore font size */
  width: 30%;
  margin: 1%;
  padding: 20px;
  background-color: #f5f5f5;
  border: 1px solid #ccc;
  vertical-align: top;
}

/* 
USE CASES:
✓ Card layouts with equal heights
✓ Button groups
✓ Image galleries with captions
✓ Navigation menus with exact sizing
✓ Form elements that need specific dimensions
✓ Creating grid-like layouts (before CSS Grid)
*/

/* Example: Card layout */
.card {
  display: inline-block;
  width: 250px;
  margin: 15px;
  padding: 20px;
  vertical-align: top;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
}

/* 
==============================================================================
                    4. DISPLAY: NONE vs VISIBILITY: HIDDEN
==============================================================================

DISPLAY: NONE
- Completely removes element from document flow
- No space is reserved for the element
- Element is not accessible to screen readers
- Cannot be interacted with
*/

.display-none {
  display: none;
  /* Element completely disappears */
}

/* 
VISIBILITY: HIDDEN
- Element is invisible but still takes up space
- Space is reserved in the layout
- Element can still be accessed programmatically
- Child elements can override with visibility: visible
*/

.visibility-hidden {
  visibility: hidden;
  /* Element is invisible but space remains */
}

.visibility-hidden .visible-child {
  visibility: visible; /* Child can be visible even if parent is hidden */
}

/* 
OPACITY: 0 (Alternative)
- Element is transparent but still takes up space
- Can still be interacted with (clickable)
- Smooth transitions possible
*/

.opacity-hidden {
  opacity: 0;
  /* Element is transparent but interactive */
  transition: opacity 0.3s ease;
}

.opacity-hidden:hover {
  opacity: 1;
}

/* 
USE CASES:

DISPLAY: NONE
✓ Responsive design (hide elements on mobile)
✓ Modal dialogs and overlays
✓ Content that should not exist in certain states
✓ JavaScript show/hide functionality

VISIBILITY: HIDDEN
✓ Placeholder spaces while loading
✓ Maintaining layout while hiding content
✓ Print stylesheets (hide but keep layout)
✓ Animation staging areas

OPACITY: 0
✓ Fade in/out animations
✓ Hover effects
✓ Loading states with transitions
*/

/* 
==============================================================================
                           5. DISPLAY: FLEX
==============================================================================

DEFINITION: Creates a flexible box layout where children become flex items
that can grow, shrink, and align along main and cross axes.

CHARACTERISTICS:
- Creates flex formatting context
- Children become flex items automatically
- One-dimensional layout (row or column)
- Powerful alignment and distribution options
- Items can grow/shrink to fill space
*/

.display-flex-demo {
  display: flex;

  /* Flex container properties */
  flex-direction: row; /* row | column | row-reverse | column-reverse */
  flex-wrap: nowrap; /* nowrap | wrap | wrap-reverse */
  justify-content: space-between; /* main axis alignment */
  align-items: center; /* cross axis alignment */
  gap: 20px; /* Modern gap property */

  /* Container styling */
  padding: 20px;
  background-color: #fce4ec;
  border: 2px solid #e91e63;
  border-radius: 10px;
  min-height: 120px;
}

/* Flex item properties */
.flex-item {
  /* Flex item can grow, shrink, and have base size */
  flex: 1; /* flex-grow: 1, flex-shrink: 1, flex-basis: 0% */
  /* OR specify individually: */
  /* flex-grow: 1;           /* Can grow to fill space */
  /* flex-shrink: 1;         /* Can shrink when needed */
  /* flex-basis: auto;       /* Initial size before growing/shrinking */

  /* Item-specific alignment */
  align-self: auto; /* Override container's align-items */

  /* Visual styling */
  padding: 15px;
  background-color: white;
  border: 1px solid #e91e63;
  border-radius: 5px;
  text-align: center;
}

/* 
COMMON FLEXBOX PATTERNS:
*/

/* Equal width columns */
.flex-equal-columns {
  display: flex;
  gap: 20px;
}

.flex-equal-columns .column {
  flex: 1; /* Each column takes equal space */
  padding: 15px;
  background-color: #f0f0f0;
}

/* Centered content */
.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
  background-color: #e8eaf6;
}

/* Header with logo and navigation */
.flex-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 30px;
  background-color: #1976d2;
  color: white;
}

.flex-header .logo {
  font-size: 1.5rem;
  font-weight: bold;
}

.flex-header nav {
  display: flex;
  gap: 30px;
}

/* 
USE CASES:
✓ Navigation bars and headers
✓ Card layouts with equal heights
✓ Centering content vertically and horizontally
✓ Sidebar layouts
✓ Form layouts
✓ Mobile-first responsive designs
✓ Component layouts within containers
*/

/* 
==============================================================================
                           6. DISPLAY: GRID
==============================================================================

DEFINITION: Creates a two-dimensional grid layout with rows and columns,
providing precise control over item placement and sizing.

CHARACTERISTICS:
- Two-dimensional layout (rows AND columns)
- Explicit track sizing and positioning
- Powerful alignment options
- Grid items can span multiple tracks
- Implicit grid creation for overflow items
*/

.display-grid-demo {
  display: grid;

  /* Define grid structure */
  grid-template-columns: 200px 1fr 100px; /* 3 columns with different sizes */
  grid-template-rows: 80px 1fr 60px; /* 3 rows */
  grid-gap: 15px; /* Gap between grid items */
  /* Modern syntax: gap: 15px; */

  /* Grid container sizing */
  height: 400px;
  padding: 20px;

  /* Visual styling */
  background-color: #f3e5f5;
  border: 2px solid #9c27b0;
  border-radius: 10px;
}

/* Grid item positioning */
.grid-item {
  padding: 15px;
  background-color: white;
  border: 1px solid #9c27b0;
  border-radius: 5px;

  /* Item can span multiple tracks */
  /* grid-column: 1 / 3;     Span from line 1 to line 3 */
  /* grid-row: 2 / 4;        Span from line 2 to line 4 */
}

/* Specific grid positioning */
.grid-header {
  grid-column: 1 / -1; /* Span all columns */
  grid-row: 1; /* First row */
  background-color: #9c27b0;
  color: white;
  text-align: center;
}

.grid-sidebar {
  grid-column: 1; /* First column */
  grid-row: 2; /* Second row */
  background-color: #e1bee7;
}

.grid-main {
  grid-column: 2; /* Second column */
  grid-row: 2; /* Second row */
  background-color: #f3e5f5;
}

.grid-aside {
  grid-column: 3; /* Third column */
  grid-row: 2; /* Second row */
  background-color: #e8eaf6;
}

.grid-footer {
  grid-column: 1 / -1; /* Span all columns */
  grid-row: 3; /* Third row */
  background-color: #9c27b0;
  color: white;
  text-align: center;
}

/* 
RESPONSIVE GRID PATTERNS:
*/

/* Auto-fit columns */
.grid-responsive {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  padding: 20px;
}

/* Named grid lines and areas */
.grid-layout {
  display: grid;
  grid-template-areas:
    "header header header"
    "sidebar main aside"
    "footer footer footer";
  grid-template-columns: 200px 1fr 150px;
  grid-template-rows: 80px 1fr 60px;
  gap: 15px;
  height: 100vh;
}

.area-header {
  grid-area: header;
}
.area-sidebar {
  grid-area: sidebar;
}
.area-main {
  grid-area: main;
}
.area-aside {
  grid-area: aside;
}
.area-footer {
  grid-area: footer;
}

/* 
USE CASES:
✓ Page layouts (header, sidebar, main, footer)
✓ Card grids with complex arrangements
✓ Magazine-style layouts
✓ Dashboard layouts
✓ Image galleries with varied sizes
✓ Form layouts with complex structures
✓ Any two-dimensional layout requirement
*/

/* 
==============================================================================
                        7. DISPLAY: TABLE FAMILY
==============================================================================

DEFINITION: Recreates HTML table behavior using CSS, allowing 
non-table elements to behave like table structures.

VALUES:
- table: Acts like <table>
- table-row: Acts like <tr>
- table-cell: Acts like <td>
- table-header-group: Acts like <thead>
- table-footer-group: Acts like <tfoot>
- table-row-group: Acts like <tbody>
- table-column: Acts like <col>
- table-column-group: Acts like <colgroup>
- table-caption: Acts like <caption>
*/

.display-table {
  display: table;
  width: 100%;
  border-collapse: separate;
  border-spacing: 10px;
  background-color: #e0f2f1;
  padding: 15px;
  border-radius: 10px;
}

.table-row {
  display: table-row;
}

.table-cell {
  display: table-cell;
  padding: 15px;
  background-color: white;
  border: 1px solid #4caf50;
  border-radius: 5px;
  vertical-align: middle; /* Table cells support vertical alignment */
  text-align: center;
}

/* Equal height columns using table-cell */
.equal-height-container {
  display: table;
  width: 100%;
  table-layout: fixed; /* Equal width columns */
}

.equal-height-column {
  display: table-cell;
  width: 33.33%;
  padding: 20px;
  vertical-align: top;
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

/* 
USE CASES:
✓ Equal height columns (before flexbox/grid)
✓ Vertical centering (before flexbox)
✓ Table-like layouts without HTML tables
✓ Legacy browser support for complex layouts
✓ When you need table-specific features like border-collapse

NOTE: Mostly replaced by Flexbox and Grid in modern development
*/

/* 
==============================================================================
                         8. DISPLAY: LIST-ITEM
==============================================================================

DEFINITION: Makes an element behave like a list item, typically
showing a marker (bullet, number) and allowing list-specific styling.
*/

.display-list-item {
  display: list-item;
  list-style-type: disc; /* bullet, circle, square, decimal, etc. */
  list-style-position: outside; /* outside | inside */
  margin-left: 30px; /* Space for marker */
  padding: 5px 0;
  border-bottom: 1px solid #eee;
}

/* Custom list styling */
.custom-list-item {
  display: list-item;
  list-style-type: none; /* Remove default marker */
  position: relative;
  padding-left: 30px;
  margin: 10px 0;
}

.custom-list-item::before {
  content: "✓";
  position: absolute;
  left: 0;
  color: #4caf50;
  font-weight: bold;
}

/* 
USE CASES:
✓ Converting non-list elements to list items
✓ Custom list implementations
✓ Step-by-step instructions
✓ Checklist interfaces
✓ Navigation with bullet points
*/

/* 
==============================================================================
                         9. DISPLAY: RUN-IN (Legacy)
==============================================================================

DEFINITION: Intended to make an element run into the next block element.
Limited browser support and largely obsolete.

NOTE: Not widely supported and removed from many modern browsers.
Use flexbox or grid for similar layouts instead.
*/

.display-run-in {
  display: run-in;
  /* Limited support - avoid in production */
  font-weight: bold;
  color: #666;
}

/* 
==============================================================================
                         10. DISPLAY: CONTENTS
==============================================================================

DEFINITION: Makes the element's box disappear, but its children
remain in the normal document flow.
*/

.display-contents {
  display: contents;
  /* The container disappears, children act as if they're direct children of the parent */
}

/* Practical example: Semantic HTML with flexbox */
.flex-container {
  display: flex;
  justify-content: space-between;
  gap: 20px;
  padding: 20px;
  background-color: #e3f2fd;
}

.semantic-wrapper {
  display: contents; /* This wrapper disappears from layout */
}

.flex-container .item {
  flex: 1;
  padding: 15px;
  background-color: white;
  border: 1px solid #1976d2;
  border-radius: 5px;
}

/* 
USE CASES:
✓ Semantic HTML without layout impact
✓ Removing wrapper elements from flex/grid layouts
✓ Component architecture where containers shouldn't affect layout
✓ Progressive enhancement scenarios
*/

/* 
==============================================================================
                        11. DISPLAY: FLOW-ROOT
==============================================================================

DEFINITION: Creates a new block formatting context, containing floats
and preventing margin collapse.
*/

.display-flow-root {
  display: flow-root;
  /* Creates new formatting context */
  background-color: #f5f5f5;
  border: 2px solid #666;
  padding: 20px;
}

/* Contains floated children */
.flow-root-container {
  display: flow-root; /* Modern clearfix alternative */
  border: 2px solid #333;
  padding: 15px;
}

.floated-item {
  float: left;
  width: 200px;
  height: 100px;
  margin: 10px;
  background-color: #ffeb3b;
  border: 1px solid #f57f17;
}

/* 
USE CASES:
✓ Modern clearfix (contains floated children)
✓ Preventing margin collapse
✓ Creating isolated formatting contexts
✓ Better alternative to overflow: hidden for containing floats
*/

/* 
==============================================================================
                    12. MULTI-VALUE DISPLAY SYNTAX
==============================================================================

DEFINITION: CSS3 introduces two-value display syntax that explicitly
defines outer and inner display types.

SYNTAX: display: <outer> <inner>
- outer: block | inline | run-in
- inner: flow | flow-root | table | flex | grid | ruby
*/

.multi-value-examples {
  /* Traditional single values still work */
  display: block; /* Same as: block flow */
  display: flex; /* Same as: block flex */
  display: inline-flex; /* Same as: inline flex */
  display: grid; /* Same as: block grid */
  display: inline-grid; /* Same as: inline grid */

  /* Explicit multi-value syntax (newer browsers) */
  /* display: block flex;     /* Block-level flex container */
  /* display: inline flex;    /* Inline-level flex container */
  /* display: block grid;     /* Block-level grid container */
  /* display: inline grid;    /* Inline-level grid container */
}

/* 
==============================================================================
                    13. PRACTICAL EXAMPLES & USE CASES
==============================================================================
*/

/* 
RESPONSIVE NAVIGATION MENU
Combines multiple display types for different screen sizes
*/

.responsive-nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 30px;
  background-color: #2c3e50;
  color: white;
}

.nav-brand {
  display: block;
  font-size: 1.5rem;
  font-weight: bold;
  text-decoration: none;
  color: white;
}

.nav-menu {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  gap: 30px;
}

.nav-item {
  display: list-item;
  list-style: none;
}

.nav-link {
  display: inline-block;
  padding: 8px 16px;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.nav-link:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

/* Mobile responsive - hide menu by default */
@media (max-width: 768px) {
  .nav-menu {
    display: none; /* Hide on mobile */
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background-color: #2c3e50;
    flex-direction: column;
    padding: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .nav-menu.active {
    display: flex; /* Show when active */
  }
}

/* 
CARD LAYOUT COMPARISON
Different approaches to card layouts
*/

/* Using Flexbox */
.cards-flex {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 20px;
}

.card-flex {
  flex: 1 1 300px; /* Flexible sizing with minimum width */
  display: flex;
  flex-direction: column;
  padding: 20px;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Using CSS Grid */
.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  padding: 20px;
}

.card-grid {
  display: flex; /* Card content uses flexbox internally */
  flex-direction: column;
  padding: 20px;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Using Inline-Block (Legacy approach) */
.cards-inline-block {
  font-size: 0; /* Remove whitespace gaps */
  padding: 20px;
}

.card-inline-block {
  display: inline-block;
  width: calc(33.333% - 20px);
  margin: 10px;
  padding: 20px;
  font-size: 16px; /* Restore font size */
  vertical-align: top;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* 
FORM LAYOUT PATTERNS
Different display approaches for forms
*/

/* Flexbox form */
.form-flex {
  display: flex;
  flex-direction: column;
  gap: 20px;
  max-width: 500px;
  padding: 30px;
  background-color: #f8f9fa;
  border-radius: 10px;
}

.form-group-flex {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-group-flex label {
  display: block;
  font-weight: bold;
  color: #333;
}

.form-group-flex input,
.form-group-flex textarea {
  display: block;
  padding: 12px;
  border: 2px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.form-group-flex input:focus,
.form-group-flex textarea:focus {
  outline: none;
  border-color: #007bff;
}

/* Grid form */
.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  max-width: 600px;
  padding: 30px;
  background-color: #f8f9fa;
  border-radius: 10px;
}

.form-group-grid {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.form-group-grid.full-width {
  grid-column: 1 / -1; /* Span full width */
}

/* 
==============================================================================
                    14. BEST PRACTICES & COMMON PATTERNS
==============================================================================
*/

/* 
CHOOSING THE RIGHT DISPLAY TYPE:

1. BLOCK
   ✓ Use for: Main content areas, sections, containers
   ✓ When you need: Full width control, vertical stacking
   
2. INLINE
   ✓ Use for: Text-level elements, small UI components
   ✓ When you need: Horizontal flow within text
   
3. INLINE-BLOCK
   ✓ Use for: Buttons, navigation items, small cards
   ✓ When you need: Inline flow with block properties
   
4. FLEX
   ✓ Use for: One-dimensional layouts, alignment, distribution
   ✓ When you need: Dynamic sizing, alignment control
   
5. GRID
   ✓ Use for: Two-dimensional layouts, complex arrangements
   ✓ When you need: Precise positioning, overlapping content
   
6. NONE
   ✓ Use for: Responsive hiding, modal states, dynamic content
   ✓ When you need: Complete removal from layout
*/

/* 
MODERN LAYOUT APPROACH:
1. Start with semantic HTML
2. Use Flexbox for component-level layouts
3. Use Grid for page-level layouts
4. Use inline-block for legacy browser support
5. Avoid floats and tables for layout
*/

/* 
RESPONSIVE CONSIDERATIONS:
*/

/* Mobile-first approach */
.responsive-container {
  display: block; /* Stack on mobile */
  padding: 15px;
}

.responsive-item {
  display: block;
  width: 100%;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f5f5f5;
  border-radius: 5px;
}

/* Tablet and up */
@media (min-width: 768px) {
  .responsive-container {
    display: flex; /* Flex layout on larger screens */
    gap: 20px;
  }

  .responsive-item {
    flex: 1;
    margin-bottom: 0;
  }
}

/* Desktop */
@media (min-width: 1024px) {
  .responsive-container {
    display: grid; /* Grid layout on desktop */
    grid-template-columns: repeat(3, 1fr);
    gap: 30px;
  }
}

/* 
ACCESSIBILITY CONSIDERATIONS:
- Use semantic HTML elements with appropriate display values
- Ensure proper heading hierarchy regardless of display type
- Test with screen readers when changing display types
- Consider keyboard navigation with display: none elements
- Use display: contents carefully as it can affect accessibility tree
*/

/* 
PERFORMANCE CONSIDERATIONS:
- Avoid frequent display property changes (causes reflow)
- Use transform and opacity for animations instead of display
- Consider will-change property for elements that change display frequently
- Use contain property for isolated display contexts
*/

.performance-optimized {
  /* Optimize for changes */
  will-change: display;
  contain: layout style;

  /* Smooth transitions for visibility changes */
  transition: opacity 0.3s ease;
}

.performance-optimized.hidden {
  opacity: 0;
  pointer-events: none; /* Prevent interaction when hidden */
}

/* 
==============================================================================
                                SUMMARY
==============================================================================

CSS Display Properties are fundamental to web layout:

1. BLOCK - Full width, vertical stacking
2. INLINE - Minimal width, horizontal flow
3. INLINE-BLOCK - Best of both worlds
4. FLEX - Modern one-dimensional layouts
5. GRID - Modern two-dimensional layouts
6. NONE - Complete removal from layout
7. TABLE family - Table-like behavior
8. CONTENTS - Invisible wrapper
9. FLOW-ROOT - New formatting context

Modern approach: Use Flexbox and Grid for layouts, with appropriate
fallbacks for older browsers. Always consider semantic HTML first,
then apply display properties to achieve the desired visual layout.

Remember: Display is about layout behavior, not visual appearance.
Use other CSS properties (position, float, etc.) in combination
for complete control over your layouts.
*/
