/* 
==============================================================================
                        CSS SIZES & UNITS COMPLETE GUIDE
==============================================================================

This file covers all CSS sizing units, font sizing, responsive sizing,
and best practices for creating scalable and accessible designs.

Author: CSS Learning Guide
Date: July 23, 2025
*/

/* 
==============================================================================
                           TABLE OF CONTENTS
==============================================================================

1. Absolute Units (px, pt, pc, in, cm, mm)
2. Relative Units (em, rem, %, vw, vh, vmin, vmax)
3. Font-Specific Units (ex, ch, lh, cap)
4. Modern CSS Units (dvw, dvh, lvw, lvh, svw, svh)
5. Font Sizing Strategies
6. Responsive Sizing Techniques
7. Container Query Units (cqw, cqh, cqi, cqb)
8. Practical Sizing Patterns
9. Accessibility & Sizing
10. Performance Considerations
11. Browser Support & Fallbacks
12. Best Practices & Guidelines

*/

/* 
==============================================================================
                          1. ABSOLUTE UNITS
==============================================================================

Absolute units have fixed sizes that don't change based on other elements.
They represent physical measurements or traditional print units.

WHEN TO USE:
✓ Print stylesheets
✓ Borders and decorative elements
✓ When you need exact pixel control
✓ Small UI elements (icons, borders)

AVOID FOR:
❌ Main text sizing (accessibility issues)
❌ Layout dimensions (responsive issues)
❌ Container sizes (mobile problems)
*/

/* PIXELS (px) - Most common absolute unit */
.absolute-px {
  font-size: 16px; /* 16 pixels - browser default */
  width: 300px; /* Fixed width */
  height: 200px; /* Fixed height */
  padding: 15px; /* Fixed padding */
  margin: 10px; /* Fixed margin */
  border: 2px solid #333; /* Perfect for borders */

  /* Visual styling */
  background-color: #f0f8ff;
  border-radius: 8px;
}

/* POINTS (pt) - Traditional print unit */
.absolute-pt {
  font-size: 12pt; /* 12 points = 16px (at 96 DPI) (DPI means Dots Per Inch) */
  /* 1pt = 1/72 inch = 1.33px (approximately) */

  /* Mainly used in print styles */
  background-color: #f5f5f5;
  padding: 10px;
  margin: 10px 0;
}

/* Print-specific sizing */
@media print {
  .print-text {
    font-size: 12pt; /* Points are natural for print (meaning 1pt = 1/72 inch) */
    line-height: 14pt;
  }

  .print-heading {
    font-size: 18pt;
    margin-bottom: 6pt;
  }
}

/* 
==============================================================================
                          2. RELATIVE UNITS
==============================================================================

Relative units scale based on other elements or viewport dimensions.
These are the foundation of responsive and accessible design.
*/

/* 
EM UNITS - Relative to parent element's font size
Cascading: Each nested em multiplies the parent's size
*/

.em-parent {
  font-size: 20px; /* Base size for children */
  background-color: #e8f5e8;
  padding: 1em; /* 20px (1 × 20px) */
  margin: 1em 0; /* 20px spacing */
  border-radius: 0.5em; /* 10px border radius */
}

.em-child {
  font-size: 1.2em; /* 24px (1.2 × 20px) */
  padding: 0.5em; /* 12px (0.5 × 24px) */
  margin: 0.25em 0; /* 6px (0.25 × 24px) */
  background-color: white;
  border: 0.1em solid #4caf50; /* 2.4px border */
}

.em-grandchild {
  font-size: 0.9em; /* 21.6px (0.9 × 24px) */
  /* EM CASCADING: 20px × 1.2 × 0.9 = 21.6px */
  padding: 0.5em; /* 10.8px */
  background-color: #c8e6c9;
}

/* 
REM UNITS - Relative to root (html) element's font size
No cascading: Always relative to root, more predictable
*/

/* Set root font size */
html {
  font-size: 16px; /* Default browser size */
  /* This becomes the basis for all rem calculations */
}

.rem-examples {
  font-size: 1rem; /* 16px (1 × 16px) */
  padding: 1.5rem; /* 24px (1.5 × 16px) */
  margin: 2rem 0; /* 32px (2 × 16px) */
  border: 0.125rem solid #2196f3; /* 2px (0.125 × 16px) */
  border-radius: 0.5rem; /* 8px */
  background-color: #e3f2fd;
}

.rem-heading {
  font-size: 2rem; /* 32px - always relative to root */
  margin-bottom: 1rem; /* 16px */
  color: #1976d2;
}

.rem-text {
  font-size: 1.125rem; /* 18px (1.125 × 16px) */
  line-height: 1.6; /* Unitless line-height is relative to font-size */
  margin-bottom: 1rem;
}

.rem-small {
  font-size: 0.875rem; /* 14px (0.875 × 16px) */
  color: #666;
}

/* 
PERCENTAGE UNITS - Relative to parent element's dimension
*/

.percentage-container {
  width: 800px; /* Fixed container for demo */
  height: 400px;
  background-color: #f3e5f5;
  padding: 20px;
  position: relative;
}

.percentage-child {
  width: 50%; /* 400px (50% of 800px) */
  height: 75%; /* 300px (75% of 400px) */
  background-color: white;
  border: 2px solid #9c27b0;
  padding: 5%; /* 40px (5% of 800px width) for horizontal */
  /* 20px (5% of 400px height) for vertical */
}

/* Font-size percentage is relative to parent's font-size */
.percentage-font-parent {
  font-size: 20px;
  background-color: #fff3e0;
  padding: 15px;
  margin: 10px 0;
}

.percentage-font-child {
  font-size: 120%; /* 24px (120% of 20px) */
  background-color: white;
  padding: 10px;
  margin: 5px 0;
}

/* 
VIEWPORT UNITS - Relative to browser viewport
vw = viewport width, vh = viewport height
vmin = smaller of vw/vh, vmax = larger of vw/vh
*/

.viewport-units {
  /* Viewport Width (vw) - 1vw = 1% of viewport width */
  width: 50vw; /* 50% of viewport width */

  /* Viewport Height (vh) - 1vh = 1% of viewport height */
  height: 30vh; /* 30% of viewport height */

  /* Font sizing with viewport units */
  font-size: 4vw; /* Responsive font size */

  /* Padding using viewport units */
  padding: 2vh 3vw; /* 2% viewport height, 3% viewport width */

  /* Visual styling */
  background-color: #e8eaf6;
  border: 0.2vw solid #3f51b5;
  border-radius: 1vw;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 2vh 0;
}

.viewport-vmin-vmax {
  /* vmin - smaller of viewport width or height */
  width: 40vmin; /* 40% of smaller viewport dimension */
  height: 40vmin; /* Square that scales with viewport */

  /* vmax - larger of viewport width or height */
  font-size: 3vmax; /* Font scales with larger dimension */

  background-color: #e0f2f1;
  border: 0.5vmin solid #4caf50;
  border-radius: 2vmin;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 2vh auto;
}

/* 
==============================================================================
                      3. FONT-SPECIFIC UNITS
==============================================================================

These units are relative to font characteristics and are useful
for typography-focused designs.
*/

/* 
EX UNITS - Relative to x-height of current font
x-height = height of lowercase 'x' in the font
*/

.ex-units {
  font-size: 16px;
  font-family: Georgia, serif; /* Font with clear x-height */

  /* Elements using ex units */
  margin-bottom: 1ex; /* Height of 'x' character */
  text-indent: 3ex; /* Indent by 3 x-heights */

  background-color: #fff8e1;
  padding: 1ex;
  border-left: 0.5ex solid #ff8f00;
}

.ex-demonstration::before {
  content: "x-height reference: x";
  font-size: 1ex; /* Same as x-height */
  color: #666;
  display: block;
  margin-bottom: 0.5ex;
}

/* 
CH UNITS - Relative to width of '0' character
Useful for monospace fonts and code blocks
*/

.ch-units {
  font-family: "Courier New", monospace;
  font-size: 16px;

  /* Width using ch units */
  width: 60ch; /* 60 characters wide */
  max-width: 60ch; /* Optimal reading width */

  /* Indentation using ch */
  text-indent: 4ch; /* Indent by 4 character widths */

  background-color: #f5f5f5;
  border: 1px solid #ddd;
  padding: 1ch;
  margin: 1rem 0;
  white-space: pre-wrap;
}

.ch-code-block {
  font-family: "Monaco", "Menlo", monospace;
  font-size: 14px;
  width: 80ch; /* 80 characters - code standard */
  background-color: #2d3748;
  color: #e2e8f0;
  padding: 1ch;
  border-radius: 0.5ch;
  overflow-x: auto;
  white-space: pre;
}

/* 
LH UNITS - Relative to line-height of current element
CAP UNITS - Relative to cap-height (height of capital letters)
Note: Limited browser support for lh and cap
*/

.lh-units {
  font-size: 18px;
  line-height: 1.6; /* 28.8px line height */

  /* Spacing using line-height units */
  margin-bottom: 1lh; /* 28.8px (1 line height) */
  padding-top: 0.5lh; /* 14.4px (0.5 line height) */

  background-color: #f3e5f5;
  border-left: 0.25lh solid #9c27b0;
  padding-left: 1rem;
}

/* 
==============================================================================
                        4. MODERN CSS UNITS
==============================================================================

New viewport units that account for mobile browser UI changes
(address bars, navigation that slides in/out)
*/

/* 
DYNAMIC VIEWPORT UNITS (dvw, dvh)
Account for dynamic changes in viewport (mobile browsers)
*/

.dynamic-viewport {
  /* Dynamic viewport height - adjusts when mobile UI changes */
  height: 100dvh; /* Full height, accounting for mobile UI */

  /* Dynamic viewport width */
  width: 100dvw; /* Full width */

  background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  text-align: center;
}

/* 
LARGE VIEWPORT UNITS (lvw, lvh)
Assume the largest possible viewport (mobile UI hidden)
*/

.large-viewport {
  height: 50lvh; /* 50% of large viewport height */
  width: 90lvw; /* 90% of large viewport width */

  background-color: #e1f5fe;
  border: 2px solid #0277bd;
  border-radius: 1rem;
  padding: 2rem;
  margin: 1rem auto;

  display: flex;
  align-items: center;
  justify-content: center;
}

/* 
SMALL VIEWPORT UNITS (svw, svh)
Assume the smallest possible viewport (mobile UI visible)
*/

.small-viewport {
  height: 40svh; /* 40% of small viewport height */
  width: 85svw; /* 85% of small viewport width */

  background-color: #f3e5f5;
  border: 2px solid #7b1fa2;
  border-radius: 1rem;
  padding: 1.5rem;
  margin: 1rem auto;

  display: flex;
  align-items: center;
  justify-content: center;
}

/* 
==============================================================================
                        5. FONT SIZING STRATEGIES
==============================================================================

Different approaches to font sizing for various use cases.
*/

/* 
STRATEGY 1: REM-BASED TYPOGRAPHY SCALE
Predictable, accessible, scales with user preferences
*/

/* Root font size with user preference scaling */
html {
  font-size: 100%; /* Respects user's browser setting */
  /* 100% = 16px in most browsers, but scales if user changes it */
}

/* Typography scale using rem */
.typography-scale h1 {
  font-size: 3rem; /* 48px at default size */
  line-height: 1.1;
  margin-bottom: 1rem;
  font-weight: 700;
}

.typography-scale h2 {
  font-size: 2.25rem; /* 36px */
  line-height: 1.2;
  margin-bottom: 0.875rem;
  font-weight: 600;
}

.typography-scale h3 {
  font-size: 1.875rem; /* 30px */
  line-height: 1.3;
  margin-bottom: 0.75rem;
  font-weight: 600;
}

.typography-scale h4 {
  font-size: 1.5rem; /* 24px */
  line-height: 1.4;
  margin-bottom: 0.625rem;
  font-weight: 500;
}

.typography-scale h5 {
  font-size: 1.25rem; /* 20px */
  line-height: 1.5;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.typography-scale h6 {
  font-size: 1.125rem; /* 18px */
  line-height: 1.5;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.typography-scale p {
  font-size: 1rem; /* 16px */
  line-height: 1.6;
  margin-bottom: 1rem;
}

.typography-scale .small {
  font-size: 0.875rem; /* 14px */
  line-height: 1.5;
}

.typography-scale .large {
  font-size: 1.125rem; /* 18px */
  line-height: 1.6;
}

/* 
STRATEGY 2: FLUID TYPOGRAPHY
Font size scales smoothly between minimum and maximum
*/

.fluid-typography {
  /* Clamp function: clamp(min, preferred, max) */
  font-size: clamp(1rem, 2.5vw, 2rem);
  /* Min: 16px, Preferred: 2.5% of viewport width, Max: 32px */

  line-height: 1.5;
  margin-bottom: 1rem;
  background-color: #e8f5e8;
  padding: 1rem;
  border-radius: 0.5rem;
}

.fluid-heading {
  font-size: clamp(1.5rem, 5vw, 4rem); /* 24px to 64px */
  line-height: 1.2;
  margin-bottom: 1rem;
  text-align: center;
  background: linear-gradient(45deg, #667eea, #764ba2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* 
STRATEGY 3: RESPONSIVE TYPOGRAPHY WITH BREAKPOINTS
Different font sizes at different screen sizes
*/

.responsive-typography {
  /* Mobile first */
  font-size: 1rem; /* 16px */
  line-height: 1.5;
  margin-bottom: 1rem;
  background-color: #fff3e0;
  padding: 1rem;
  border-radius: 0.5rem;
}

/* Tablet */
@media (min-width: 768px) {
  .responsive-typography {
    font-size: 1.125rem; /* 18px */
    line-height: 1.6;
  }
}

/* Desktop */
@media (min-width: 1024px) {
  .responsive-typography {
    font-size: 1.25rem; /* 20px */
    line-height: 1.7;
  }
}

/* Large desktop */
@media (min-width: 1200px) {
  .responsive-typography {
    font-size: 1.375rem; /* 22px */
    line-height: 1.8;
  }
}

/* 
STRATEGY 4: MODULAR SCALE
Mathematical relationships between font sizes
*/

/* Golden ratio scale (1.618) */
.modular-scale {
  --scale-ratio: 1.618;
  --base-size: 1rem;
}

.modular-scale .size-xs {
  font-size: calc(
    var(--base-size) / var(--scale-ratio) / var(--scale-ratio)
  ); /* ~0.38rem */
}

.modular-scale .size-sm {
  font-size: calc(var(--base-size) / var(--scale-ratio)); /* ~0.62rem */
}

.modular-scale .size-base {
  font-size: var(--base-size); /* 1rem */
}

.modular-scale .size-lg {
  font-size: calc(var(--base-size) * var(--scale-ratio)); /* ~1.62rem */
}

.modular-scale .size-xl {
  font-size: calc(
    var(--base-size) * var(--scale-ratio) * var(--scale-ratio)
  ); /* ~2.62rem */
}

.modular-scale .size-xxl {
  font-size: calc(
    var(--base-size) * var(--scale-ratio) * var(--scale-ratio) *
      var(--scale-ratio)
  ); /* ~4.24rem */
}

/* 
==============================================================================
                      6. CONTAINER QUERY UNITS
==============================================================================

New units based on container size rather than viewport
(Requires container queries support)
*/

/* Container for container queries */
.container-query-demo {
  container-type: inline-size; /* Enable container queries */
  container-name: card-container;

  width: 100%;
  max-width: 600px;
  background-color: #f0f8ff;
  border: 2px solid #1976d2;
  border-radius: 1rem;
  padding: 1rem;
  margin: 2rem auto;
  resize: horizontal; /* Allow resizing for demo */
  overflow: auto;
}

.container-responsive-text {
  /* Container query units */
  font-size: 5cqw; /* 5% of container width */
  padding: 2cqh 3cqw; /* Container height/width based */

  /* cqi = inline size, cqb = block size */
  margin: 1cqi; /* 1% of container inline size */

  background-color: white;
  border-radius: 0.5rem;
  text-align: center;
  border: 1px solid #ddd;
}

/* Container queries for responsive design */
@container card-container (min-width: 300px) {
  .container-responsive-text {
    font-size: 3cqw;
    padding: 1.5cqh 2cqw;
  }
}

@container card-container (min-width: 500px) {
  .container-responsive-text {
    font-size: 2cqw;
    padding: 1cqh 1.5cqw;
  }
}

/* 
==============================================================================
                      7. PRACTICAL SIZING PATTERNS
==============================================================================

Real-world patterns for common sizing scenarios.
*/

/* 
PATTERN 1: READABLE TEXT BLOCKS
Optimal line length for readability
*/

.readable-text {
  /* Optimal reading width: 45-75 characters */
  max-width: 65ch; /* 65 characters wide */
  font-size: 1.125rem; /* 18px - comfortable reading size */
  line-height: 1.6; /* Good line spacing */
  margin: 0 auto 2rem; /* Center and space */
  padding: 0 1rem; /* Side padding for mobile */

  background-color: #fafafa;
  border-left: 4px solid #2196f3;
  padding-left: 1.5rem;
}

/* 
PATTERN 2: RESPONSIVE CARD SIZING
Cards that adapt to different screen sizes
*/

.responsive-card {
  /* Flexible width with constraints */
  width: 100%;
  max-width: 400px;
  min-width: 280px;

  /* Responsive padding */
  padding: clamp(1rem, 4vw, 2rem);

  /* Responsive border radius */
  border-radius: clamp(0.5rem, 2vw, 1rem);

  background-color: white;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin: 1rem;
}

.card-title {
  font-size: clamp(1.25rem, 4vw, 1.75rem);
  line-height: 1.3;
  margin-bottom: 0.75rem;
  color: #333;
}

.card-content {
  font-size: clamp(0.875rem, 2.5vw, 1rem);
  line-height: 1.6;
  color: #666;
}

/* 
PATTERN 3: RESPONSIVE SPACING SYSTEM
Consistent spacing that scales
*/

.spacing-system {
  /* CSS Custom Properties for spacing scale */
  --space-xs: 0.25rem; /* 4px */
  --space-sm: 0.5rem; /* 8px */
  --space-md: 1rem; /* 16px */
  --space-lg: 1.5rem; /* 24px */
  --space-xl: 2rem; /* 32px */
  --space-2xl: 3rem; /* 48px */
  --space-3xl: 4rem; /* 64px */
}

/* Responsive spacing that grows with viewport */
.responsive-spacing {
  /* Clamp for responsive spacing */
  margin-top: clamp(var(--space-md), 5vw, var(--space-2xl));
  margin-bottom: clamp(var(--space-lg), 4vw, var(--space-xl));
  padding: clamp(var(--space-sm), 3vw, var(--space-lg));

  background-color: #e8f5e8;
  border-radius: var(--space-sm);
}

/* 
PATTERN 4: BUTTON SIZING SYSTEM
Consistent button sizes across the application
*/

.btn-base {
  /* Base button styles */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.2s ease;

  /* Prevent user selection */
  user-select: none;
  -webkit-user-select: none;
}

.btn-sm {
  font-size: 0.875rem; /* 14px */
  padding: 0.5rem 0.75rem; /* 8px 12px */
  min-height: 2rem; /* 32px */
}

.btn-md {
  font-size: 1rem; /* 16px */
  padding: 0.625rem 1rem; /* 10px 16px */
  min-height: 2.5rem; /* 40px */
}

.btn-lg {
  font-size: 1.125rem; /* 18px */
  padding: 0.75rem 1.25rem; /* 12px 20px */
  min-height: 3rem; /* 48px */
}

.btn-xl {
  font-size: 1.25rem; /* 20px */
  padding: 1rem 1.5rem; /* 16px 24px */
  min-height: 3.5rem; /* 56px */
}

/* 
PATTERN 5: RESPONSIVE GRID SIZING
Grid layouts that adapt to screen size
*/

.responsive-grid {
  display: grid;
  gap: clamp(1rem, 3vw, 2rem);
  margin: 2rem 0;

  /* Responsive grid columns */
  grid-template-columns: repeat(auto-fit, minmax(min(300px, 100%), 1fr));
}

.grid-item {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 0.5rem;
  padding: clamp(1rem, 3vw, 1.5rem);
  min-height: 200px;

  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

/* 
==============================================================================
                      8. ACCESSIBILITY & SIZING
==============================================================================

Ensuring your sizes work for all users, including those with disabilities.
*/

/* 
RESPECTING USER PREFERENCES
Never use fixed pixel sizes for fonts - always allow scaling
*/

/* ❌ BAD: Fixed pixel sizes prevent scaling */
.bad-fixed-size {
  font-size: 14px !important; /* Prevents user scaling */
  max-width: 600px; /* Fixed width ignores zoom */
}

/* ✅ GOOD: Relative sizes that scale with user preferences */
.good-scalable-size {
  font-size: 0.875rem; /* Scales with user's root font size */
  max-width: 37.5rem; /* Scales proportionally */
  line-height: 1.5; /* Unitless line-height */
}

/* 
MINIMUM TARGET SIZES
Ensure interactive elements meet accessibility guidelines
*/

.accessible-button {
  /* Minimum 44px × 44px for touch targets (WCAG AA) */
  min-width: 2.75rem; /* 44px */
  min-height: 2.75rem; /* 44px */
  padding: 0.75rem 1rem;

  /* Ensure text contrast is sufficient */
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 0.25rem;
  font-size: 1rem;
  cursor: pointer;
}

/* Focus indicators must be visible */
.accessible-button:focus {
  outline: 2px solid #ff9800;
  outline-offset: 2px;
}

/* 
RESPONSIVE FONT SIZES FOR ACCESSIBILITY
Ensure text remains readable at all screen sizes
*/

.accessible-text {
  /* Minimum 16px font size to prevent mobile zoom */
  font-size: max(1rem, 16px);
  line-height: 1.5; /* Minimum 1.5 for readability */

  /* Sufficient contrast ratio */
  color: #333; /* 4.5:1 contrast on white */
  background-color: white;
}

/* 
MOTION PREFERENCES
Respect user's motion preferences when sizing changes
*/

@media (prefers-reduced-motion: reduce) {
  .size-animation {
    /* Remove or reduce size-based animations */
    transition: none;
  }
}

@media (prefers-reduced-motion: no-preference) {
  .size-animation {
    transition: font-size 0.3s ease, padding 0.3s ease;
  }
}

/* 
==============================================================================
                      9. PERFORMANCE CONSIDERATIONS
==============================================================================

How sizing choices affect performance and optimization strategies.
*/

/* 
LAYOUT THRASHING PREVENTION
Avoid properties that cause expensive recalculations
*/

/* ❌ BAD: Changes that cause layout recalculation */
.expensive-size-change {
  width: 300px;
  transition: width 0.3s ease; /* Causes layout recalculation */
}

.expensive-size-change:hover {
  width: 350px; /* Forces reflow */
}

/* ✅ GOOD: Use transform for size changes */
.performant-size-change {
  width: 300px;
  transition: transform 0.3s ease; /* GPU accelerated */
}

.performant-size-change:hover {
  transform: scaleX(1.16); /* No reflow, GPU handled */
}

/* 
CONTENT-BASED SIZING OPTIMIZATION
Use contain property to isolate layout calculations
*/

.optimized-container {
  contain: layout style; /* Isolate layout calculations */
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

/* 
FONT LOADING OPTIMIZATION
Prevent layout shift during font loading
*/

.font-optimized {
  /* Fallback font with similar metrics */
  font-family: "Custom Font", -apple-system, BlinkMacSystemFont, sans-serif;

  /* Prevent layout shift */
  font-display: swap; /* Use with @font-face */

  /* Size adjustment to match custom font */
  font-size: 1rem;
  font-size-adjust: 0.5; /* Adjust x-height when font loads */
}

/* 
==============================================================================
                    10. BROWSER SUPPORT & FALLBACKS
==============================================================================

Ensuring your sizing works across different browsers and versions.
*/

/* 
MODERN UNIT FALLBACKS
Provide fallbacks for newer CSS units
*/

.modern-units-with-fallbacks {
  /* Fallbacks for older browsers */
  width: 300px; /* Pixel fallback */
  width: 50vw; /* Viewport width for modern browsers */

  /* Font size with multiple fallbacks */
  font-size: 18px; /* Pixel fallback */
  font-size: 1.125rem; /* Rem for scaling */
  font-size: clamp(1rem, 3vw, 1.5rem); /* Fluid for modern browsers */

  /* Container query fallback */
  padding: 1rem; /* Fixed fallback */
  padding: 3cqw; /* Container query for supporting browsers */
}

/* Feature queries for progressive enhancement */
@supports (width: 1cqw) {
  .container-query-enhanced {
    width: 50cqw;
    font-size: 4cqw;
  }
}

@supports (font-size: clamp(1rem, 2vw, 2rem)) {
  .clamp-enhanced {
    font-size: clamp(1rem, 3vw, 2rem);
  }
}

/* 
VIEWPORT UNIT FIXES
Address mobile browser viewport issues
*/

/* Fix for mobile browsers with changing viewport */
.viewport-fix {
  height: 100vh; /* Fallback */
  height: 100dvh; /* Dynamic viewport height */

  /* Alternative fix for older browsers */
  min-height: 100vh;
  min-height: calc(100vh - 1px); /* Prevent scroll on some mobile browsers */
}

/* 
==============================================================================
                      11. BEST PRACTICES & GUIDELINES
==============================================================================

Professional guidelines for CSS sizing in production applications.
*/

/* 
SIZING HIERARCHY OF PREFERENCES:

1. REM for most font sizes (scales with user preferences)
2. EM for spacing relative to current font size
3. CH for text-based width constraints
4. VW/VH for full-viewport components
5. Percentage for proportional layouts
6. PX only for borders, small decorative elements, or print

AVOID:
❌ Fixed pixel font sizes (accessibility)
❌ Viewport units for small text (readability)
❌ EM for everything (cascading complexity)
❌ Mixing unit types inconsistently
*/

/* 
RESPONSIVE SIZING STRATEGY:

1. Mobile-first approach
2. Use clamp() for fluid sizing
3. Set min/max constraints
4. Test with user zoom up to 200%
5. Ensure 44px minimum touch targets
*/

.best-practice-example {
  /* 1. Scalable base size */
  font-size: 1rem;

  /* 2. Relative spacing */
  padding: 1em;
  margin: 1.5rem 0;

  /* 3. Constrained width for readability */
  max-width: 65ch;

  /* 4. Responsive adjustments */
  font-size: clamp(0.875rem, 2.5vw, 1.125rem);

  /* 5. Performance-conscious borders */
  border: 1px solid #ddd;
  border-radius: 0.25rem;

  /* 6. Accessible colors and contrast */
  background-color: #fafafa;
  color: #333;

  /* 7. Layout containment for performance */
  contain: layout style;
}

/* 
SIZING UTILITIES SYSTEM
Create a consistent sizing system for your project
*/

/* Size scale using CSS custom properties */
:root {
  /* Spacing scale */
  --size-1: 0.25rem; /* 4px */
  --size-2: 0.5rem; /* 8px */
  --size-3: 0.75rem; /* 12px */
  --size-4: 1rem; /* 16px */
  --size-5: 1.25rem; /* 20px */
  --size-6: 1.5rem; /* 24px */
  --size-8: 2rem; /* 32px */
  --size-10: 2.5rem; /* 40px */
  --size-12: 3rem; /* 48px */
  --size-16: 4rem; /* 64px */
  --size-20: 5rem; /* 80px */
  --size-24: 6rem; /* 96px */

  /* Font sizes */
  --text-xs: 0.75rem; /* 12px */
  --text-sm: 0.875rem; /* 14px */
  --text-base: 1rem; /* 16px */
  --text-lg: 1.125rem; /* 18px */
  --text-xl: 1.25rem; /* 20px */
  --text-2xl: 1.5rem; /* 24px */
  --text-3xl: 1.875rem; /* 30px */
  --text-4xl: 2.25rem; /* 36px */
  --text-5xl: 3rem; /* 48px */

  /* Responsive breakpoints */
  --screen-sm: 640px;
  --screen-md: 768px;
  --screen-lg: 1024px;
  --screen-xl: 1280px;
}

/* Utility classes for consistent sizing */
.text-xs {
  font-size: var(--text-xs);
}
.text-sm {
  font-size: var(--text-sm);
}
.text-base {
  font-size: var(--text-base);
}
.text-lg {
  font-size: var(--text-lg);
}
.text-xl {
  font-size: var(--text-xl);
}
.text-2xl {
  font-size: var(--text-2xl);
}
.text-3xl {
  font-size: var(--text-3xl);
}
.text-4xl {
  font-size: var(--text-4xl);
}
.text-5xl {
  font-size: var(--text-5xl);
}

.p-1 {
  padding: var(--size-1);
}
.p-2 {
  padding: var(--size-2);
}
.p-3 {
  padding: var(--size-3);
}
.p-4 {
  padding: var(--size-4);
}
.p-6 {
  padding: var(--size-6);
}
.p-8 {
  padding: var(--size-8);
}

.m-1 {
  margin: var(--size-1);
}
.m-2 {
  margin: var(--size-2);
}
.m-3 {
  margin: var(--size-3);
}
.m-4 {
  margin: var(--size-4);
}
.m-6 {
  margin: var(--size-6);
}
.m-8 {
  margin: var(--size-8);
}

/* 
==============================================================================
                               SUMMARY
==============================================================================

CSS SIZING UNITS QUICK REFERENCE:

ABSOLUTE UNITS:
• px - Pixels (screen), most common absolute unit
• pt - Points (print), 1pt = 1.33px
• pc - Picas (print), 1pc = 12pt = 16px
• in, cm, mm - Physical measurements (print)

RELATIVE UNITS:
• em - Relative to parent font size (cascades)
• rem - Relative to root font size (consistent)
• % - Percentage of parent dimension
• vw/vh - Viewport width/height percentage
• vmin/vmax - Smaller/larger viewport dimension
• ex - Height of 'x' in current font
• ch - Width of '0' in current font

MODERN UNITS:
• dvw/dvh - Dynamic viewport (mobile-aware)
• lvw/lvh - Large viewport (mobile UI hidden)
• svw/svh - Small viewport (mobile UI visible)
• cqw/cqh - Container query width/height
• clamp() - Responsive sizing with min/max

BEST PRACTICES:
1. Use rem for font sizes (accessibility)
2. Use em for spacing relative to text
3. Use ch for text-based width constraints
4. Use vw/vh for full-viewport components
5. Use clamp() for fluid responsive sizing
6. Always provide fallbacks for modern units
7. Test with user zoom and different devices
8. Ensure minimum 44px touch targets
9. Respect user motion preferences
10. Use CSS custom properties for consistent scales

Remember: The goal is accessible, responsive, performant designs
that work for all users across all devices and preferences.
*/
